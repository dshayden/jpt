#!/usr/bin/env python
import argparse, numpy as np, jpt, sys, du
import IPython as ip

def work(DX, sampleZ):
  DZ = jpt.io.load(sampleZ)

  w, y, o = ( DX['w'], DX['y'], DX['o'] )
  z = DZ['z']

  ll = 0.0
  if set(w.ks) != set(z.ks):
    print('Inconsistent track identifiers in sampleX and sampleZ',
      file=sys.stderr)
    return ll

  for k in w.ks:
    # build x, y dictionary for kalman.ffbs
    zk = z.to(k)
    ts_k = zk.keys()

    xk = dict([ (t, w.x[k][1][t]) for t in ts_k])
    yk = dict([(t, y[t][zk[t]]) for t in ts_k])
    x0 = ( o.prior.mu0, o.prior.Sigma0 )
    theta = w.x[k][0]
    okf = jpt.kalman.opts(o.param.dy, o.param.dx, F=o.param.F, H=o.param.H,
      Q=theta['Q'], R=theta['R'])

    x_, ll_x = jpt.kalman.ffbs(okf, xk, yk, x0, return_ll=True)
    ll += ll_x

  # todo: handle noise-associated observations

  return ll

def main(args):
  DX = jpt.io.load(args.sampleX)
  pArgs = [ (DX, sz) for sz in args.samplesZ ]
  lls = du.Parfor(work, pArgs, showProgress=False)
  for ll in lls: print(ll)

  # ll = work(args.sampleX, args.sampleZ)
  # if np.isclose(ll, 0.0): sys.exit(-1) # exit with failure

if __name__ == "__main__":
  parser = argparse.ArgumentParser(description='')
  parser.add_argument('sampleX', type=str, help='Sample to use X values from')
  parser.add_argument('samplesZ', type=str, nargs='+',
		help='Filepaths of samples to use Z values from.')
  parser.set_defaults(func=main)

  args = parser.parse_args()
  args.func(args)
